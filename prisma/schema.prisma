// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String               @id @default(cuid())
  email             String               @unique
  name              String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  householdMembers  HouseholdMember[]
  dietPreferences   UserDietPreference[]
  allergies         UserAllergy[]
}

model Household {
  id                String               @id @default(cuid())
  name              String
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  members           HouseholdMember[]
  storageLocations  StorageLocation[]
  mealPlans         MealPlan[]
  shoppingLists     ShoppingList[]
}

model HouseholdMember {
  id          String     @id @default(cuid())
  role        String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  household   Household  @relation(fields: [householdId], references: [id])
  householdId String

  @@unique([userId, householdId])
}

model StorageLocation {
  id            String          @id @default(cuid())
  name          String
  description   String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  household     Household       @relation(fields: [householdId], references: [id])
  householdId   String
  inventoryItems InventoryItem[]
}

model InventoryItem {
  id                String          @id @default(cuid())
  quantity          Float
  unit              String
  expiryDate        DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  storageLocation   StorageLocation @relation(fields: [storageLocationId], references: [id])
  storageLocationId String
  product           Product         @relation(fields: [productId], references: [id])
  productId         String
}

model Product {
  id                  String              @id @default(cuid())
  name                String
  description         String?
  brand               String?
  barcode             String?             @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  category            Category            @relation(fields: [categoryId], references: [id])
  categoryId          String
  inventoryItems      InventoryItem[]
  recipeIngredients   RecipeIngredient[]
  shoppingListItems   ShoppingListItem[]
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Recipe {
  id                String              @id @default(cuid())
  name              String
  description       String?
  instructions      String
  prepTime          Int
  cookTime          Int
  servings          Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ingredients       RecipeIngredient[]
  mealPlanEntries   MealPlanEntry[]
}

model RecipeIngredient {
  id          String   @id @default(cuid())
  quantity    Float
  unit        String
  notes       String?
  recipe      Recipe   @relation(fields: [recipeId], references: [id])
  recipeId    String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String

  @@unique([recipeId, productId])
}

model MealPlan {
  id            String          @id @default(cuid())
  name          String
  startDate     DateTime
  endDate       DateTime
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  household     Household       @relation(fields: [householdId], references: [id])
  householdId   String
  entries       MealPlanEntry[]
}

model MealPlanEntry {
  id          String    @id @default(cuid())
  date        DateTime
  mealType    String    // e.g., "breakfast", "lunch", "dinner"
  notes       String?
  mealPlan    MealPlan  @relation(fields: [mealPlanId], references: [id])
  mealPlanId  String
  recipe      Recipe    @relation(fields: [recipeId], references: [id])
  recipeId    String
}

model ShoppingList {
  id          String              @id @default(cuid())
  name        String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  household   Household           @relation(fields: [householdId], references: [id])
  householdId String
  items       ShoppingListItem[]
}

model ShoppingListItem {
  id            String      @id @default(cuid())
  quantity      Float
  unit          String
  isChecked     Boolean     @default(false)
  notes         String?
  shoppingList  ShoppingList @relation(fields: [shoppingListId], references: [id])
  shoppingListId String
  product       Product     @relation(fields: [productId], references: [id])
  productId     String

  @@unique([shoppingListId, productId])
}

model DietPreference {
  id                String               @id @default(cuid())
  name              String               @unique
  description       String?
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  userPreferences   UserDietPreference[]
}

model UserDietPreference {
  id                String          @id @default(cuid())
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id])
  userId            String
  dietPreference    DietPreference  @relation(fields: [dietPreferenceId], references: [id])
  dietPreferenceId  String

  @@unique([userId, dietPreferenceId])
}

model UserAllergy {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  allergy   Allergy  @relation(fields: [allergyId], references: [id])
  allergyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, allergyId])
}

model Allergy {
  id          String        @id @default(uuid())
  name        String        @unique
  description String?
  users       UserAllergy[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
} 